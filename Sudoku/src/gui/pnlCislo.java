/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Font;
import javax.swing.JOptionPane;
import znaky.IPoleZnaku;
import znaky.PoleZnaku;

/**
 *
 * @author Old≈ôich
 */
public class pnlCislo extends javax.swing.JPanel {

    /**
     * Creates new form pnlCislo
     */
    private boolean stale = false;
    private char znak = '0';
    private Font font;
    private Font boldFont;
    private int velikost;
    private boolean spatne = false;

    public pnlCislo() {
        initComponents();
        txtCislo.setText(znak + "");
        this.font = txtCislo.getFont();
        this.boldFont = new Font(font.getFontName(), Font.BOLD, font.getSize());
        this.velikost = this.getWidth();
    }

    public char getZnak() {
        return znak;
    }

    public void setZnak(char znak) {
        this.znak = znak;
        txtCislo.setText(znak + "");
    }

    public boolean isStale() {
        return stale;
    }

    public void setStale(boolean stale) {
        this.stale = stale;
        if (stale) {
            txtCislo.setFont(boldFont);
            setBackground(Color.lightGray);
            txtCislo.setEditable(!stale);
        } else {
            txtCislo.setFont(font);
            setBackground(Color.white);
            txtCislo.setEditable(!stale);
        }
    }

    public void setSpatne(boolean spatne) {
        this.spatne = spatne;
        if (spatne) {
            setBackground(Color.red);
        } else {
            IPoleZnaku<Character> poleZnaku = new PoleZnaku<>(znaky.EZnaky.BEZNE.vratPole(), znaky.EZnaky.BEZNE.vratPrazdno());
            if (znak != Character.MIN_VALUE && poleZnaku.vratIndex(znak) == -1) {
                setSpatne(true);

            } else {
                setStale(stale);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCislo = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(20, 20));
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        txtCislo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCislo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCisloKeyReleased(evt);
            }
        });
        add(txtCislo, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized
        int zmenaP = (int) (this.getHeight() * 0.6);
        this.font = new Font(font.getFontName(), Font.PLAIN, zmenaP);
        this.boldFont = new Font(font.getFontName(), Font.BOLD, zmenaP);
        if (stale) {
            txtCislo.setFont(boldFont);
        } else {
            txtCislo.setFont(font);
        }
    }//GEN-LAST:event_formAncestorResized

    private void txtCisloKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCisloKeyReleased
        if (stale) {
            setZnak(znak);
            return;
        }
        if (txtCislo.getText().trim().isEmpty()) {
            setZnak(Character.MIN_VALUE);
        } else {
            setZnak(txtCislo.getText().trim().charAt(0));

        }
//        pnlVstup vstup = new pnlVstup();
//        int dialog = JOptionPane.showConfirmDialog(this, vstup, "Vyber hodnoty pole", JOptionPane.OK_CANCEL_OPTION);
//        if (dialog == JOptionPane.OK_OPTION) {
//            if (vstup.getHodnota() == '0') {
//                setZnak(Character.MIN_VALUE);
//            } else {
//                setZnak(vstup.getHodnota());
//            }
//        }
    }//GEN-LAST:event_txtCisloKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField txtCislo;
    // End of variables declaration//GEN-END:variables
}
